name: Reusable Gemini Discovery

on:
  workflow_call:
    inputs:
      user_request:
        description: 'Your discovery request for Gemini CLI'
        required: true
        type: string
      model:
        description: 'Gemini model to use'
        required: false
        type: string
        default: 'gemini-2.5-flash-preview-05-20'
      enable_debug_logging:
        description: 'Enable comprehensive debug logging for Gemini CLI'
        required: false
        type: boolean
        default: true
      
      # Prompt override parameters
      custom_discovery_prompt:
        description: 'Custom discovery prompt file path in calling repo'
        required: false
        type: string
        default: ''
      custom_rules_file:
        description: 'Custom rules file path in calling repo'
        required: false
        type: string
        default: ''
      additional_context_files:
        description: 'Additional context files (comma-separated) from calling repo'
        required: false
        type: string
        default: ''
        
      # Workflow repo configuration
      workflows_repo:
        description: 'Repository containing agentic workflows'
        required: false
        type: string
        default: 'IstiN/dmtools-agentic-workflows'
      workflows_ref:
        description: 'Git ref (branch/tag) of workflows repo to use'
        required: false
        type: string
        default: 'main'
        
    secrets:
      GEMINI_API_KEY:
        description: 'Gemini API key for AI interactions'
        required: true

permissions:
  contents: read
  issues: write

jobs:
  discovery-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout target repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        path: target-repo
        
    - name: Checkout agentic workflows
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.workflows_repo }}
        ref: ${{ inputs.workflows_ref }}
        path: agentic-workflows
        
    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install Gemini CLI
      run: |
        npm install -g @google/gemini-cli
        echo "‚úÖ Gemini CLI installed successfully"
        
    - name: Setup prompt configuration
      run: |
        cd target-repo
        echo "üîß Setting up discovery prompt configuration..."
        
        # Create prompts directory
        mkdir -p .agentic-config/prompts
        
        # Copy default prompts from agentic-workflows
        cp ../agentic-workflows/prompts/* .agentic-config/prompts/
        
        # Override with custom prompts if provided
        if [ -n "${{ inputs.custom_discovery_prompt }}" ] && [ -f "${{ inputs.custom_discovery_prompt }}" ]; then
          echo "‚úÖ Using custom discovery prompt: ${{ inputs.custom_discovery_prompt }}"
          cp "${{ inputs.custom_discovery_prompt }}" .agentic-config/prompts/discovery-prompt.md
        else
          echo "üìã Using default discovery prompt"
        fi
        
        # Aggregate custom rules if provided
        if [ -n "${{ inputs.custom_rules_file }}" ] && [ -f "${{ inputs.custom_rules_file }}" ]; then
          echo "‚úÖ Including custom rules: ${{ inputs.custom_rules_file }}"
          echo "" >> .agentic-config/prompts/discovery-prompt.md
          echo "## Custom Project Rules" >> .agentic-config/prompts/discovery-prompt.md
          echo "" >> .agentic-config/prompts/discovery-prompt.md
          cat "${{ inputs.custom_rules_file }}" >> .agentic-config/prompts/discovery-prompt.md
        fi
        
        # Include additional context files
        if [ -n "${{ inputs.additional_context_files }}" ]; then
          echo "‚úÖ Including additional context files: ${{ inputs.additional_context_files }}"
          echo "" >> .agentic-config/prompts/discovery-prompt.md
          echo "## Additional Project Context" >> .agentic-config/prompts/discovery-prompt.md
          echo "" >> .agentic-config/prompts/discovery-prompt.md
          
          IFS=',' read -ra FILES <<< "${{ inputs.additional_context_files }}"
          for file in "${FILES[@]}"; do
            file=$(echo "$file" | xargs)  # trim whitespace
            if [ -f "$file" ]; then
              echo "### $file" >> .agentic-config/prompts/discovery-prompt.md
              echo '```' >> .agentic-config/prompts/discovery-prompt.md
              cat "$file" >> .agentic-config/prompts/discovery-prompt.md
              echo '```' >> .agentic-config/prompts/discovery-prompt.md
              echo "" >> .agentic-config/prompts/discovery-prompt.md
            fi
          done
        fi
        
        echo "üìã Final discovery prompt configuration:"
        ls -la .agentic-config/prompts/
        
    - name: Prepare request for Gemini CLI
      run: |
        cd target-repo
        export PROMPTS_PATH=".agentic-config/prompts"
        ../agentic-workflows/scripts/prepare-user-request.sh "${{ inputs.user_request }}" "outputs"

    - name: Setup Gemini CLI environment
      run: |
        cd target-repo
        ../agentic-workflows/scripts/setup-cli-env.sh "gemini" "${{ inputs.model }}" "${{ secrets.GEMINI_API_KEY }}"

    - name: Discovery using Gemini CLI
      id: gemini_discovery
      run: |
        cd target-repo
        echo "üîç Starting Gemini CLI Discovery Analysis"
        
        # Export environment variables for Gemini CLI
        export GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}"
        export PROMPTS_PATH=".agentic-config/prompts"
        
        # Configure debug logging based on input parameter
        if [ "${{ inputs.enable_debug_logging }}" = "true" ]; then
          echo "üîç Debug logging ENABLED - comprehensive output will be shown"
          export DEBUG=1
          export DEBUG_MODE=1
          export DEBUG="gemini*,@google/gemini-cli*"
          export NODE_OPTIONS="--trace-warnings --max-old-space-size=8192"
          export GEMINI_CLI_VERBOSE=true
          export GEMINI_CLI_LOG_LEVEL=debug
          export GEMINI_DEBUG_ENABLED=true
        else
          echo "üîá Debug logging DISABLED - minimal output will be shown"
          export NODE_OPTIONS="--max-old-space-size=8192"
          export GEMINI_DEBUG_ENABLED=false
        fi
        
        # Run discovery using our simplified script with comprehensive logging
        echo "üîç Executing run-gemini.sh script in discovery mode with full logging..."
        
        # Capture both stdout and stderr with timestamps and timeout protection
        set -x  # Enable command tracing
        (
          echo "=== GEMINI CLI DISCOVERY START: $(date) ==="
          echo "üïê Timeout set to 25 minutes to prevent infinite loops"
          
          # Use timeout with kill signal after grace period
          timeout --signal=TERM --kill-after=60s 25m ../agentic-workflows/scripts/run-gemini.sh "discovery" "outputs/user-request.txt" 2>&1 | while IFS= read -r line; do
            echo "[$(date '+%H:%M:%S')] $line"
            
            # Always check for critical error patterns
            if [[ "$line" == *"MaxListenersExceededWarning"* ]]; then
              echo "[$(date '+%H:%M:%S')] ‚ö†Ô∏è WARNING: Detected potential memory leak warning"
            fi
            if [[ "$line" == *"Error executing tool"* ]]; then
              echo "[$(date '+%H:%M:%S')] ‚ö†Ô∏è WARNING: Detected tool execution error"
            fi
            
            # Additional debug patterns only when debug logging is enabled
            if [ "${{ inputs.enable_debug_logging }}" = "true" ]; then
              # Check for MCP connection patterns
              if [[ "$line" == *"Attempting to connect to"* ]]; then
                echo "[$(date '+%H:%M:%S')] üîç MCP: Connection attempt detected"
              fi
              if [[ "$line" == *"Cannot connect to"*"server may be down"* ]]; then
                echo "[$(date '+%H:%M:%S')] üö® MCP: Connection failed"
              fi
              if [[ "$line" == *"Connected to"*"server"* ]]; then
                echo "[$(date '+%H:%M:%S')] ‚úÖ MCP: Connection successful"
              fi
              
              # Debug mode confirmations
              if [[ "$line" == *"Found readable global GEMINI.md"* ]] || [[ "$line" == *"Searching for GEMINI.md"* ]]; then
                echo "[$(date '+%H:%M:%S')] üîç DEBUG: Memory discovery active"
              fi
            fi
          done
          
          TIMEOUT_EXIT=$?
          echo "=== GEMINI CLI DISCOVERY END: $(date) ==="
          if [ $TIMEOUT_EXIT -eq 124 ]; then
            echo "‚ùå TIMEOUT: Gemini CLI discovery exceeded 25 minutes - likely in infinite loop"
          elif [ $TIMEOUT_EXIT -eq 137 ]; then
            echo "‚ùå KILLED: Gemini CLI process was forcefully terminated"
          fi
          exit $TIMEOUT_EXIT
        ) | tee outputs/gemini-discovery.log
        DISCOVERY_EXIT_CODE=${PIPESTATUS[0]}
        set +x  # Disable command tracing
        
        echo "üìã Script exit code: $DISCOVERY_EXIT_CODE"
        
        # Check for log files and show summary
        echo "üîç Debug: Checking for output files..."
        ls -la outputs/ || echo "‚ùå No outputs directory found"
        
        echo "üìã Gemini discovery log summary (last 50 lines):"
        if [ -f "outputs/gemini-discovery.log" ]; then
          tail -50 outputs/gemini-discovery.log
        else
          echo "‚ùå No gemini-discovery.log found"
        fi
        
        echo "üîç Debug: Checking for response.md file..."
        if [ -f "outputs/response.md" ]; then
          echo "‚úÖ Found response.md ($(wc -c < outputs/response.md) bytes)"
          echo "üìã Response.md preview (first 20 lines):"
          head -20 outputs/response.md
        else
          echo "‚ùå response.md file is missing!"
          echo "üîç Available files in outputs directory:"
          ls -la outputs/ || echo "‚ùå No outputs directory found"
          
          echo "üîç Looking for any *.md files in outputs:"
          find outputs/ -name "*.md" 2>/dev/null || echo "‚ùå No .md files found"
        fi
        
        # Check if discovery was successful
        if [ $DISCOVERY_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ Discovery completed successfully"
          if [ -f "outputs/response.md" ]; then
            echo "üìÑ Found response.md file"
            DISCOVERY_RESPONSE=$(cat outputs/response.md)
            echo "gemini_response<<EOF" >> $GITHUB_OUTPUT
            echo "$DISCOVERY_RESPONSE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è No response.md file found"
            echo "gemini_response=Discovery completed but no response file found" >> $GITHUB_OUTPUT
          fi
        else
          echo "‚ùå Discovery failed with exit code $DISCOVERY_EXIT_CODE"
          
          # Determine failure reason
          if [ $DISCOVERY_EXIT_CODE -eq 124 ]; then
            FAILURE_REASON="TIMEOUT - Execution exceeded 25 minutes (likely infinite loop)"
          elif [ $DISCOVERY_EXIT_CODE -eq 137 ]; then
            FAILURE_REASON="KILLED - Process was forcefully terminated"
          else
            FAILURE_REASON="FAILED with exit code $DISCOVERY_EXIT_CODE"
          fi
          
          echo "üîç Failure reason: $FAILURE_REASON"
          
          # Try to get error details from log files
          if [ -f "outputs/response-log_"*".txt" ]; then
            echo "üìã Error log content (last 100 lines):"
            tail -100 outputs/response-log_*.txt
          fi
          
          # Show execution log for timeout cases
          if [ $DISCOVERY_EXIT_CODE -eq 124 ] || [ $DISCOVERY_EXIT_CODE -eq 137 ]; then
            echo "üìã Last 100 lines of discovery log to analyze loop patterns:"
            if [ -f "outputs/gemini-discovery.log" ]; then
              tail -100 outputs/gemini-discovery.log
            fi
          fi
          
          echo "gemini_response=Discovery $FAILURE_REASON" >> $GITHUB_OUTPUT
        fi

    - name: Create discovery summary
      env:
        DISCOVERY_RESPONSE: ${{ steps.gemini_discovery.outputs.gemini_response }}
      run: |
        cd target-repo
        # Save discovery summary
        mkdir -p outputs/discovery-summary
        echo "$DISCOVERY_RESPONSE" > outputs/discovery-summary/discovery-analysis.md
        echo "üìù Discovery summary saved"
        
        # Create a comprehensive discovery report
        echo "# üîç Agentic Discovery Report" > outputs/discovery-summary/full-report.md
        echo "" >> outputs/discovery-summary/full-report.md
        echo "**Generated on:** $(date)" >> outputs/discovery-summary/full-report.md
        echo "**Model Used:** ${{ inputs.model }}" >> outputs/discovery-summary/full-report.md
        echo "**Workflows Repo:** ${{ inputs.workflows_repo }}@${{ inputs.workflows_ref }}" >> outputs/discovery-summary/full-report.md
        echo "" >> outputs/discovery-summary/full-report.md
        
        echo "## üìã Original Request" >> outputs/discovery-summary/full-report.md
        echo "" >> outputs/discovery-summary/full-report.md
        echo '```' >> outputs/discovery-summary/full-report.md
        cat outputs/user-request.txt >> outputs/discovery-summary/full-report.md
        echo '```' >> outputs/discovery-summary/full-report.md
        echo "" >> outputs/discovery-summary/full-report.md
        
        echo "## üîç Discovery Analysis" >> outputs/discovery-summary/full-report.md
        echo "" >> outputs/discovery-summary/full-report.md
        if [ -f "outputs/response.md" ]; then
          cat outputs/response.md >> outputs/discovery-summary/full-report.md
        else
          echo "$DISCOVERY_RESPONSE" >> outputs/discovery-summary/full-report.md
        fi
        
        echo "" >> outputs/discovery-summary/full-report.md
        echo "## üìä Execution Details" >> outputs/discovery-summary/full-report.md
        echo "" >> outputs/discovery-summary/full-report.md
        echo "- **Workflow Run:** [${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> outputs/discovery-summary/full-report.md
        echo "- **Repository:** ${{ github.repository }}" >> outputs/discovery-summary/full-report.md
        echo "- **Branch:** ${{ github.ref_name }}" >> outputs/discovery-summary/full-report.md
        echo "- **Commit:** ${{ github.sha }}" >> outputs/discovery-summary/full-report.md
        
        echo "‚úÖ Full discovery report created"

    - name: Upload discovery results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: agentic-discovery-results-${{ github.run_number }}
        path: |
          target-repo/outputs/response.md
          target-repo/outputs/response-log_*.txt
          target-repo/outputs/discovery-prompt-combined.md
          target-repo/outputs/user-request.txt
          target-repo/outputs/gemini-discovery.log
          target-repo/outputs/discovery-summary/
        retention-days: 14
        if-no-files-found: warn

    - name: Display discovery summary
      env:
        DISCOVERY_RESPONSE: ${{ steps.gemini_discovery.outputs.gemini_response }}
      run: |
        # Display comprehensive summary
        echo "## üîç Agentic Discovery Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show request details
        echo "### üìã Request Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Model**: ${{ inputs.model }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Debug Logging**: ${{ inputs.enable_debug_logging }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflows Repo**: ${{ inputs.workflows_repo }}@${{ inputs.workflows_ref }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show original request
        echo "### üìù Original Request" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat target-repo/outputs/user-request.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show discovery results
        echo "### üîç Discovery Analysis" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Show clean discovery analysis from response.md
        if [ -f "target-repo/outputs/response.md" ]; then
          cat target-repo/outputs/response.md >> $GITHUB_STEP_SUMMARY
        else
          echo "$DISCOVERY_RESPONSE" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Discovery results and logs have been uploaded as workflow artifacts:" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifact Name**: agentic-discovery-results-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Retention**: 14 days" >> $GITHUB_STEP_SUMMARY
        echo "- **Contents**: Discovery analysis, logs, and full report" >> $GITHUB_STEP_SUMMARY
